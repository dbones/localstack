version: '3.6'

networks:
  dev:
    driver: bridge

volumes:
  postgres:
  rabbitmq:
  prometheus:

services:
  #stateful services

  # https://github.com/rabbitmq/rabbitmq-prometheus/blob/master/docker/docker-compose-overview.yml
  # https://blog.devops.dev/configure-docker-rabbitmq-with-delay-message-plugin-d94c8d8caa5a
  rabbitmq:
    image: rabbitmq:3.12
    volumes:
      - rabbitmq:/var/lib/rabbitmq
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-abc123!!}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"             #AMQP
      - "${RABBITMQ_ADMIN_PORT:-15672}:15672"     #UI
      - "${RABBITMQ_METRICS_PORT:-15692}:15692"   #Prometheus
    cap_add:
      - ALL
    networks:
      - dev
    restart: unless-stopped


  # https://github.com/bitnami/containers/blob/main/bitnami/postgresql/README.md
  postgres:
    image: bitnami/postgresql:16
    volumes:
      - postgres:/bitnami/postgres
    environment:
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE:-postgres}
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME:-postgres}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD:-abc123!!}
      # POSTGRESQL_PGAUDIT_LOG: ${POSTGRES_AUDIT:-all}
    ports:
      - "${POSTGRESQL_PORT:-5432}:5432"
    networks:
      - dev
    restart: unless-stopped

  # https://nelsoncode.medium.com/how-to-monitor-posgresql-with-prometheus-and-grafana-docker-36d216532ea2
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:abc123!!@postgres:5432/postgres?sslmode=disable"
    networks:
      - dev
    restart: unless-stopped

  # https://stackoverflow.com/questions/64620446/adding-postgress-connections-to-pgadmin-in-docker-file
  pgadmin:
    image: dpage/pgadmin4:8
    volumes:
       - ./pgadmin/servers.json:/pgadmin4/servers.json
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-dev@dbones.co.uk}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-abc123!!}
      PGADMIN_LISTEN_ADDRESS: ${PGADMIN_LISTEN_ADDRESS:-0.0.0.0}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT:-80}
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: ${PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED:-False}
      PGADMIN_CONFIG_SERVER_MODE: ${PGADMIN_CONFIG_SERVER_MODE:-False}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - dev
    restart: unless-stopped


  redis:
    image: redis:7.0-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - dev
    restart: unless-stopped

  # # https://github.com/deanwilson/docker-compose-prometheus/blob/main/redis-server/docker-compose.yaml
  # redis-exporter:
  #   image: oliver006/redis_exporter:v1.6.0-alpine
  #   ports:
  #     - 9121:9121
  #   networks:
  #     - dev
  #   restart: unless-stopped
  #   command:
  #     - '--redis.addr=redis://redis:6379'
  #     - '--redis.password=slightly-locked'


  # telemetry services
  # ports are locked

  # https://faun.pub/open-telemetry-cloud-native-observability-with-loki-grafana-and-jaeger-for-net-9fecabcf8aeb


  # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/redisreceiver/README.md
  # https://github.com/mnadeem/boot-opentelemetry-tempo/blob/main/etc/loki-local.yaml
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/examples/demo/docker-compose.yaml
  # https://github.com/open-telemetry/opentelemetry-demo/blob/main/docker-compose.yml
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.93.0
    command: --config=/etc/otel-collector/config.yaml
    volumes:
      - ./opentelem/config.yaml:/etc/otel-collector/config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
      - "3500:3500"   # loki
      - "6831:6831/udp"
    networks:
      - dev
    restart: unless-stopped

  # https://github.com/grafana/grafana/blob/main/devenv/dashboards.yaml
  # https://github.com/grafana/tempo/blob/main/example/docker-compose/local/docker-compose.yaml
  # https://grafana.com/docs/opentelemetry/collector/send-logs-to-loki/loki-receiver/
  # https://github.com/grafana/tempo/tree/main/example/docker-compose
  # https://github.com/nazarii-piontko/sample-dotnet-otel
  # https://www.mytechramblings.com/posts/getting-started-with-opentelemetry-metrics-and-dotnet-part-2/

  grafana:
    image: grafana/grafana:10.3.1
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources/
      - ./grafana/dashboards:/var/lib/grafana/dashboards/
    environment:
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_FEATURE_TOGGLES_ENABLE: "traceqlEditor traceQLStreaming metricsSummary"
    ports:
      - "3000:3000"
    networks:
      - dev
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.45.3
    volumes:
      - prometheus:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - dev
    restart: unless-stopped

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "9095:9095" # tempo grpc
      # - "4317:4317"  # otlp grpc
      # - "4318:4318"  # otlp http, we are not exposing these, see the otel collector
      - "9411:9411"   # zipkin
    networks:
      - dev
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.3
    command: -config.file=/etc/loki.yaml
    volumes:
      - ./loki/loki.yaml:/etc/loki.yaml
    ports:
      - "3100:3100"
    networks:
      - dev
    restart: unless-stopped

  # provide another view
  jaeger:
    image: jaegertracing/all-in-one:1.54
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      # - "${JAEGER_AGENT_PORT:-6831}:6831/udp" # thrift
      # - "4317:4317"  # otlp grpc
      # - "4318:4318"  # otlp http, we are not exposing these, see the otel collector
      - "16686:16686" # UI
    networks:
      - dev
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - dev
    restart: unless-stopped

  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    volumes:
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"
    networks:
      - dev
    restart: unless-stopped

# dashboards
# Rabbit
# https://grafana.com/grafana/dashboards/10991-rabbitmq-overview/
# https://grafana.com/grafana/dashboards/14798-rabbitmq-stream/
# postgres
# https://grafana.com/grafana/dashboards/9628
# 